-- ===========================================
-- 1. TABLE CREATION
-- ===========================================

-- USERS (extension of auth.users)
create table public.users (
    id uuid primary key references auth.users(id) on delete cascade,
    first_name text,
    last_name text,
    email text unique not null,
    phone text,
    role text default 'user', -- user, admin, etc.
    created_at timestamptz default now(),
    updated_at timestamptz default now()
);

-- PLANS
create table public.plans (
    id serial primary key,
    name text not null,
    description text,
    price numeric(12,2) not null,
    currency text default 'USD',
    is_active boolean default true,
    created_at timestamptz default now(),
    updated_at timestamptz default now()
);

-- SUBSCRIPTIONS
create table public.subscriptions (
    id serial primary key,
    user_id uuid references public.users(id) on delete cascade,
    plan_id integer references public.plans(id) on delete set null,
    status text not null, -- active, cancelled, pending, etc.
    start_date timestamptz default now(),
    end_date timestamptz,
    created_at timestamptz default now(),
    updated_at timestamptz default now()
);

-- PAYMENTS
create table public.payments (
    id serial primary key,
    user_id uuid references public.users(id) on delete set null,
    subscription_id integer references public.subscriptions(id) on delete set null,
    amount numeric(12,2) not null,
    currency text default 'USD',
    status text not null, -- approved, pending, rejected
    method text, -- stripe, bank_transfer, etc.
    reference text, -- external payment id
    details jsonb,
    payment_date timestamptz default now(),
    created_at timestamptz default now(),
    updated_at timestamptz default now()
);

-- CONTACT FORMS
create table public.contact_forms (
    id serial primary key,
    name text,
    email text not null,
    phone text,
    message text not null,
    user_id uuid references public.users(id) on delete set null,
    read boolean default false,
    created_at timestamptz default now()
);

-- NEWSLETTER
create table public.newsletter (
    id serial primary key,
    email text not null unique,
    user_id uuid references public.users(id) on delete set null,
    confirmed boolean default false,
    created_at timestamptz default now()
);

-- CUSTOM REQUESTS
create table public.custom_requests (
    id serial primary key,
    user_id uuid references public.users(id) on delete set null,
    subject text,
    message text not null,
    status text default 'pending', -- pending, answered, closed
    response text,
    created_at timestamptz default now(),
    updated_at timestamptz default now()
);

-- USEFUL INDEXES
create index on public.payments (user_id);
create index on public.subscriptions (user_id);
create index on public.subscriptions (plan_id);
create index on public.contact_forms (user_id);
create index on public.custom_requests (user_id);

-- ===========================================
-- 2. ROW LEVEL SECURITY (RLS)
-- ===========================================

alter table public.users enable row level security;
alter table public.plans enable row level security;
alter table public.subscriptions enable row level security;
alter table public.payments enable row level security;
alter table public.contact_forms enable row level security;
alter table public.newsletter enable row level security;
alter table public.custom_requests enable row level security;

-- ===========================================
-- 3. ACCESS POLICIES BY ROLE
-- ===========================================

-- USERS: each user sees only their own record
create policy "Users: only own profile"
    on public.users
    for select using (auth.uid() = id);

create policy "Users: can only update their profile"
    on public.users
    for update using (auth.uid() = id);

-- PLANS: everyone can read, only admin can update
create policy "Plans: public read"
    on public.plans
    for select using (true);

create policy "Plans: only admin can update"
    on public.plans
    for update using (auth.role() = 'authenticated' and exists (
        select 1 from public.users u where u.id = auth.uid() and u.role = 'admin'
    ));

-- SUBSCRIPTIONS: each user sees only their own
create policy "Subscriptions: only own"
    on public.subscriptions
    for select using (user_id = auth.uid());

create policy "Subscriptions: only own (update/delete)"
    on public.subscriptions
    for update using (user_id = auth.uid());
create policy "Subscriptions: only own (delete)"
    on public.subscriptions
    for delete using (user_id = auth.uid());

-- PAYMENTS: each user sees only their own
create policy "Payments: only own"
    on public.payments
    for select using (user_id = auth.uid());

-- CONTACT FORMS: each user sees only their own, admin sees all
create policy "Contact Forms: own or admin"
    on public.contact_forms
    for select using (
        user_id = auth.uid() or
        (exists (select 1 from public.users u where u.id = auth.uid() and u.role = 'admin'))
    );

-- NEWSLETTER: only admin sees all, user sees their own email
create policy "Newsletter: own or admin"
    on public.newsletter
    for select using (
        user_id = auth.uid() or
        (exists (select 1 from public.users u where u.id = auth.uid() and u.role = 'admin'))
    );

-- CUSTOM REQUESTS: own or admin
create policy "Custom Requests: own or admin"
    on public.custom_requests
    for select using (
        user_id = auth.uid() or
        (exists (select 1 from public.users u where u.id = auth.uid() and u.role = 'admin'))
    );

-- ===========================================
-- 4. SAMPLE DATA (optional)
-- ===========================================

insert into public.users (id, first_name, last_name, email, phone, role)
values
    ('00000000-0000-0000-0000-000000000001', 'John', 'Doe', 'john@example.com', '1122334455', 'admin'),
    ('00000000-0000-0000-0000-000000000002', 'Anna', 'Smith', 'anna@example.com', '1199887766', 'user');

insert into public.plans (name, description, price, currency)
values
    ('Basic', 'Access to free resources', 0, 'USD'),
    ('Pro', 'Full access to all courses and support', 4999, 'USD'),
    ('Premium', 'VIP access, mentoring and exclusive material', 9999, 'USD');

insert into public.subscriptions (user_id, plan_id, status, start_date)
values
    ('00000000-0000-0000-0000-000000000002', 2, 'active', now());

insert into public.payments (user_id, subscription_id, amount, currency, status, method, reference, details)
values
    ('00000000-0000-0000-0000-000000000002', 1, 4999, 'USD', 'approved', 'stripe', 'ST-123456', '{"external_reference": "ST-123456"}');

insert into public.contact_forms (name, email, phone, message, user_id)
values
    ('Anna Smith', 'anna@example.com', '1199887766', 'I want more info about the Pro plan', '00000000-0000-0000-0000-000000000002');

insert into public.newsletter (email, user_id, confirmed)
values
    ('anna@example.com', '00000000-0000-0000-0000-000000000002', true);

insert into public.custom_requests (user_id, subject, message, status)
values
    ('00000000-0000-0000-0000-000000000002', 'Demo request', 'I would like to schedule a personalized demo', 'pending');

-- ===========================================
-- END OF SCRIPT
-- =========================================== 