#!/usr/bin/env node

import dotenv from 'dotenv';
import { resolve } from 'path';

// Cargar variables de entorno desde m√∫ltiples ubicaciones
dotenv.config({ path: resolve(process.cwd(), '.env') });
dotenv.config({ path: resolve(process.cwd(), 'config.env') });
dotenv.config({ path: resolve(process.cwd(), 'config.env.example') });

console.log('üîß Verificando configuraci√≥n de OAuth y base de datos...\n');

// Variables cr√≠ticas para OAuth
const criticalVars = {
  'NODE_ENV': process.env.NODE_ENV,
  'SESSION_SECRET': process.env.SESSION_SECRET,
  'DATABASE_URL': process.env.DATABASE_URL,
  'GOOGLE_CLIENT_ID': process.env.GOOGLE_CLIENT_ID,
  'GOOGLE_CLIENT_SECRET': process.env.GOOGLE_CLIENT_SECRET,
  'DOMAIN': process.env.DOMAIN
};

let allConfigured = true;

console.log('üìã Estado de las variables cr√≠ticas:');
console.log('=====================================');

for (const [key, value] of Object.entries(criticalVars)) {
  const isConfigured = value && value !== 'your_' + key.toLowerCase().replace(/_/g, '_') + '_here';
  const status = isConfigured ? '‚úÖ Configurado' : '‚ùå No configurado';
  const displayValue = isConfigured ? (key.includes('SECRET') || key.includes('KEY') ? '***' : value) : 'No definido';
  
  console.log(`${key}: ${status} - ${displayValue}`);
  
  if (!isConfigured) {
    allConfigured = false;
  }
}

console.log('\nüîç Verificaciones adicionales:');
console.log('==============================');

// Verificar NODE_ENV
if (process.env.NODE_ENV === 'production') {
  console.log('‚úÖ NODE_ENV est√° en producci√≥n');
} else {
  console.log('‚ö†Ô∏è  NODE_ENV no est√° en producci√≥n:', process.env.NODE_ENV || 'development');
}

// Verificar DATABASE_URL
if (process.env.DATABASE_URL) {
  if (process.env.DATABASE_URL.includes('supabase.co')) {
    console.log('‚úÖ DATABASE_URL apunta a Supabase');
  } else if (process.env.DATABASE_URL.includes('postgresql://')) {
    console.log('‚úÖ DATABASE_URL es una conexi√≥n PostgreSQL v√°lida');
  } else {
    console.log('‚ö†Ô∏è  DATABASE_URL no parece ser una URL de base de datos v√°lida');
  }
} else {
  console.log('‚ùå DATABASE_URL no est√° configurado');
}

// Verificar Google OAuth
if (process.env.GOOGLE_CLIENT_ID && process.env.GOOGLE_CLIENT_SECRET) {
  console.log('‚úÖ Google OAuth est√° configurado');
  
  // Verificar que las credenciales no sean placeholders
  if (process.env.GOOGLE_CLIENT_ID.includes('your_') || process.env.GOOGLE_CLIENT_SECRET.includes('your_')) {
    console.log('‚ùå Google OAuth tiene valores placeholder');
    allConfigured = false;
  }
} else {
  console.log('‚ùå Google OAuth no est√° configurado');
  allConfigured = false;
}

// Verificar DOMAIN para producci√≥n
if (process.env.NODE_ENV === 'production') {
  if (process.env.DOMAIN && process.env.DOMAIN !== 'tuwebai.com') {
    console.log('‚úÖ DOMAIN est√° configurado para producci√≥n:', process.env.DOMAIN);
  } else {
    console.log('‚ùå DOMAIN no est√° configurado correctamente para producci√≥n');
    allConfigured = false;
  }
}

console.log('\nüìä Resumen:');
console.log('===========');

if (allConfigured) {
  console.log('üéâ ¬°Todas las variables cr√≠ticas est√°n configuradas correctamente!');
  console.log('‚úÖ OAuth deber√≠a funcionar sin problemas');
} else {
  console.log('‚ùå Hay variables cr√≠ticas sin configurar');
  console.log('‚ö†Ô∏è  OAuth puede fallar en producci√≥n');
  console.log('\nüîß Variables que necesitan configuraci√≥n:');
  
  for (const [key, value] of Object.entries(criticalVars)) {
    const isConfigured = value && value !== 'your_' + key.toLowerCase().replace(/_/g, '_') + '_here';
    if (!isConfigured) {
      console.log(`   - ${key}`);
    }
  }
  
  console.log('\nüìù Instrucciones:');
  console.log('1. Configura las variables en Render.com (Environment Variables)');
  console.log('2. Aseg√∫rate de que DATABASE_URL apunte a tu base de datos de producci√≥n');
  console.log('3. Configura las credenciales de Google OAuth en Google Cloud Console');
  console.log('4. Establece NODE_ENV=production');
  console.log('5. Configura SESSION_SECRET con una clave segura');
}

console.log('\nüîó URLs de verificaci√≥n:');
console.log('=======================');
console.log('Frontend: https://tuweb-ai.com');
console.log('Backend: https://tuwebai-backend.onrender.com');
console.log('Google OAuth: https://console.cloud.google.com/apis/credentials');

process.exit(allConfigured ? 0 : 1); 